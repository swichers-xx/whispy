rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to read all messages
    match /messages/{messageId} {
      allow read: if request.auth != null;
      // Allow users to create messages
      allow create: if request.auth != null && 
                     request.resource.data.userId == request.auth.uid;
      // Allow users to update only their own messages or reactions/ratings on any message
      allow update: if request.auth != null && 
                     (resource.data.userId == request.auth.uid || 
                      isOnlyUpdatingReactionsOrRatings());
      // Allow users to delete only their own messages
      allow delete: if request.auth != null && 
                     resource.data.userId == request.auth.uid;
    }
    
    // Allow authenticated users to read room settings
    match /rooms/{roomId} {
      allow read: if request.auth != null;
      // Only admins can create/update/delete rooms (you'll need to implement admin checking)
      allow write: if request.auth != null && isAdmin();
    }
    
    // Allow users to read other users' public data
    match /users/{userId} {
      allow read: if request.auth != null;
      // Users can only write to their own documents
      allow write: if request.auth != null && 
                    request.auth.uid == userId;
    }
    
    // Helper function to check if the update only modifies reactions or ratings
    function isOnlyUpdatingReactionsOrRatings() {
      let allowedFields = ['reactions', 'ratings', 'ratingScore', 'readBy'];
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasOnly(allowedFields);
    }
    
    // Helper function to check if user is an admin
    // You'll need to implement this based on your admin management approach
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}
